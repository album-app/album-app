package mdc.ida.hips;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class DummyServer {
	private ServerSocket serverSocket;

	public static DummyServer launch(int port) throws IOException {
		DummyServer server = new DummyServer();
		server.start(port);
		return server;
	}

	private void start(int port) throws IOException {
		serverSocket = new ServerSocket(port);
		new Thread(() -> {
			try {
				while (true) {
					Socket socket = serverSocket.accept();
					(new ClientHandler(socket)).start();
				}
			} catch (IOException e) {
				System.err.println(e.toString());
				System.exit(1);
			}
		}).start();
	}

	private static class ClientHandler extends Thread {
		private final Socket clientSocket;
		private BufferedReader in;

		public ClientHandler(Socket socket) {
			this.clientSocket = socket;
		}

		public void run() {
			try {
				PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
				in = new BufferedReader(
						new InputStreamReader(clientSocket.getInputStream()));

				String inputLine;
				while ((inputLine = in.readLine()) != null) {
					handleRequest(out, inputLine);
				}

				in.close();
				out.close();
				clientSocket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private static void handleRequest(PrintWriter out, String msg) {
		if(msg == null) return;
		ObjectMapper mapper = new ObjectMapper();
		JsonNode jsonNode = null;
		try {
			jsonNode = mapper.readTree(msg);
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(jsonNode != null) {
			JsonNode action = jsonNode.get("action");
			if(action != null) {
				if(action.asText().equals("get_index")) {
					out.println(getCollection());
				}
				if(action.asText().equals("launch_hips")) {
					out.println("");
				}
			}
		}
		out.flush();
	}

	public static String getCollection() {
		return "{\"catalog_local\": [{\"args\": [{\"default\": \"/mnt/data/RadialSymmetry/ImagesForStephan/Empty_Bg_SNR_Range_Sigxy_1_SigZ_2/Poiss_30spots_bg_200_16_I_300_0_img0.tif\", \"description\": \"Path to a 2D or 3D image stack\", \"name\": \"imp\"}, {\"default\": 1.0, \"description\": \"Anisotropy of voxels in the 3D image\", \"name\": \"anisotropy\"}, {\"default\": true, \"description\": \"Use RANSAC\", \"name\": \"RANSAC\"}, {\"default\": 2.0, \"description\": \"Sigma value for radial symmetry\", \"name\": \"sigma\"}, {\"default\": 0.01, \"description\": \"Threshold for radial symmetry\", \"name\": \"threshold\"}, {\"default\": 1, \"description\": \"Support region around the point for radial symmetry\", \"name\": \"supportRegion\"}, {\"default\": 0.3, \"description\": \"Inlier ratio for determining points\", \"name\": \"inlierRatio\"}, {\"default\": 0.75, \"description\": \"Maximum error\", \"name\": \"maxError\"}, {\"default\": \"./radial_symmetry_results.txt\", \"description\": \"Results file for saving all detected points\", \"name\": \"resultsPath\"}], \"authors\": \"Kyle Harrington, Deborah Schmidt\", \"cite\": \"Ella Bahry, Laura Breimann, Klim Kolyvanov, Leo Epstein, Timothee Lionnet, Kyle Harrington, Stephan Preibisch \\\"RS-FISH: Software for fast, accurate detection of single-molecule mRNA transcripts in 3D images\\\"\", \"covers\": [{\"description\": \"Exemplary noisy input data and the resulting segmentation and point detection of radial symmetry.\", \"source\": \"/assets/images/solutions/radial-symmetry/cover.png\"}], \"description\": \"Radial symmetry HIP Solution\", \"documentation\": \"\", \"doi\": \"coming soon\", \"format_version\": \"0.3.0\", \"git_repo\": \"https://github.com/ida-mdc/hips\", \"license\": \"GPLv2\", \"min_hips_version\": \"0.1.0\", \"name\": \"0.1.0\", \"sample_inputs\": [{\"description\": \"Noisy input demo data generated by XY\", \"source\": \"/assets/images/solutions/radial-symmetry/radial_symmetry_example_input.tif\"}], \"sample_outputs\": [{\"description\": \"Table including detected point center positions generated by running this solution.\", \"source\": \"/assets/images/solutions/radial-symmetry/radial_symmetry_example_result.txt\"}], \"solution_group\": \"ida-mdc\", \"solution_name\": \"radial-symmetry\", \"solution_version\": \"0.1.0\", \"tags\": [\"point detection\"], \"tested_hips_version\": \"0.1.0\"}, {\"args\": [{\"default\": 1234, \"description\": \"Port to use for launching communication server (TCP)\", \"name\": \"eventport\"}], \"authors\": \"Deborah Schmidt\", \"cite\": \"\", \"covers\": [], \"description\": \"HIPS launcher\", \"documentation\": \"\", \"format_version\": \"0.3.0\", \"git_repo\": \"\", \"license\": \"\", \"min_hips_version\": \"0.1.0\", \"name\": \"0.1.0\", \"sample_inputs\": [], \"sample_outputs\": [], \"solution_group\": \"ida-mdc\", \"solution_name\": \"hips-launcher\", \"solution_version\": \"0.1.0\", \"tags\": [\"avatar\"], \"tested_hips_version\": \"0.1.0\"}], \"hips-catalog\": [{\"args\": [{\"default\": \"/mnt/data/RadialSymmetry/ImagesForStephan/Empty_Bg_SNR_Range_Sigxy_1_SigZ_2/Poiss_30spots_bg_200_16_I_300_0_img0.tif\", \"description\": \"Path to a 2D or 3D image stack\", \"name\": \"imp\"}, {\"default\": 1.0, \"description\": \"Anisotropy of voxels in the 3D image\", \"name\": \"anisotropy\"}, {\"default\": true, \"description\": \"Use RANSAC\", \"name\": \"RANSAC\"}, {\"default\": 2.0, \"description\": \"Sigma value for radial symmetry\", \"name\": \"sigma\"}, {\"default\": 0.01, \"description\": \"Threshold for radial symmetry\", \"name\": \"threshold\"}, {\"default\": 1, \"description\": \"Support region around the point for radial symmetry\", \"name\": \"supportRegion\"}, {\"default\": 0.3, \"description\": \"Inlier ratio for determining points\", \"name\": \"inlierRatio\"}, {\"default\": 0.75, \"description\": \"Maximum error\", \"name\": \"maxError\"}, {\"default\": \"./radial_symmetry_results.txt\", \"description\": \"Results file for saving all detected points\", \"name\": \"resultsPath\"}], \"authors\": \"Kyle Harrington, Deborah Schmidt\", \"cite\": \"Ella Bahry, Laura Breimann, Klim Kolyvanov, Leo Epstein, Timothee Lionnet, Kyle Harrington, Stephan Preibisch \\\"RS-FISH: Software for fast, accurate detection of single-molecule mRNA transcripts in 3D images\\\"\", \"covers\": [{\"description\": \"Exemplary noisy input data and the resulting segmentation and point detection of radial symmetry.\", \"source\": \"/assets/images/solutions/radial-symmetry/cover.png\"}], \"description\": \"Radial symmetry HIP Solution\", \"documentation\": \"\", \"format_version\": \"0.3.0\", \"git_repo\": \"https://github.com/ida-mdc/hips\", \"license\": \"GPLv2\", \"min_hips_version\": \"0.1.0\", \"name\": \"0.1.0\", \"sample_inputs\": [{\"description\": \"Noisy input demo data generated by XY\", \"source\": \"/assets/images/solutions/radial-symmetry/radial_symmetry_example_input.tif\"}], \"sample_outputs\": [{\"description\": \"Table including detected point center positions generated by running this solution.\", \"source\": \"/assets/images/solutions/radial-symmetry/radial_symmetry_example_result.txt\"}], \"solution_group\": \"ida-mdc\", \"solution_name\": \"radial-symmetry\", \"solution_version\": \"0.1.0\", \"tags\": [\"point detection\"], \"tested_hips_version\": \"0.1.0\", \"timestamp\": \"2021-02-08T22:16:03.331998\"}, {\"args\": [{\"default\": \"\", \"description\": \"Path to 3D image stack\", \"name\": \"input\"}], \"authors\": \"Deborah Schmidt\", \"cite\": \"G\\u00fcnther, U., & Harrington, K. I. (2020). Tales from the Trenches: Developing sciview, a new 3D viewer for the ImageJ community. VisGap @ EuroGraphics. arXiv preprint [arXiv:2004.11897](https://arxiv.org/abs/2004.11897).\", \"covers\": [{\"description\": \"Cover created based on data from [MICCAI Challenge on Circuit Reconstruction from Electron Microscopy Images](https://cremi.org/data/)\", \"source\": \"/assets/images/solutions/sciview-volume-rendering/cover.png\"}], \"description\": \"sciview volume rendering HIP Solution\", \"documentation\": \"\", \"format_version\": \"0.3.0\", \"git_repo\": \"https://github.com/ida-mdc/hips\", \"license\": \"not specified\", \"min_hips_version\": \"0.1.0\", \"name\": \"0.1.0\", \"sample_inputs\": [], \"sample_outputs\": [], \"solution_group\": \"ida-mdc\", \"solution_name\": \"sciview-volume-rendering\", \"solution_version\": \"0.1.0\", \"tags\": [\"volumetric viewer\", \"VR\", \"sciview\", \"scenery\"], \"tested_hips_version\": \"0.1.0\", \"timestamp\": \"2021-02-08T22:16:03.331998\"}]}\n";
	}

	public void dispose() throws IOException {
		serverSocket.close();
	}
}
